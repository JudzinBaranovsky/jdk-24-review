plugins {
    id 'org.springframework.boot' version "3.3.5"
    id 'io.spring.dependency-management' version "1.1.6"
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0"

    testImplementation "io.rest-assured:rest-assured:5.5.1"
}

var jdk24Launcher = javaToolchains.launcherFor {
    languageVersion = JavaLanguageVersion.of(24)
    vendor = JvmVendorSpec.matching("Oracle")
}

tasks.register('runAotLinkingConfig', JavaExec) {
    classpath = files(tasks.bootJar)
    jvmArgs = ["-XX:AOTMode=record", "-XX:AOTConfiguration=app.aotconf"]
    javaLauncher = jdk24Launcher
}

tasks.register("stopWebApp") {
    doFirst {
        def request = URI.create("http://localhost:8080/actuator/shutdown")
                .toURL()
                .openConnection();
        request.setRequestMethod("POST");

        def responseCode = request.getResponseCode();
        println(responseCode);

        if (!responseCode.equals(200)) {
            throw new RuntimeException("failed to stop the application");
        }
    }
}

tasks.register('runAotLinkingRecord', JavaExec) {
    classpath = files(tasks.bootJar)
    jvmArgs = ["-XX:AOTMode=create", "-XX:AOTConfiguration=app.aotconf", "-XX:AOTCache=main.aot"]
    javaLauncher = jdk24Launcher
}

tasks.register('runWithAot', JavaExec) {
    classpath = files(tasks.bootJar)
    jvmArgs = ["-XX:AOTCache=main.aot", "-XX:AOTMode=on"]
    javaLauncher = jdk24Launcher
}

tasks.register('runWithoutAot', JavaExec) {
    classpath = files(tasks.bootJar)
    javaLauncher = jdk24Launcher
}
